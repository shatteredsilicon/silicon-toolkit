#!/usr/bin/env perl

# This is st-unused-key-checker, a program to check unused indexes
# in a MySQL table.
#
# Copyright (C) 2024  Shattered Silicon Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use strict;
use warnings FATAL => 'all';

our $VERSION = '1.0.0';

# ############################################################################
# Option package
# ############################################################################
package Option;

use strict;
use Getopt::Long qw(:config no_ignore_case auto_version);
use English qw(-no_match_vars);
use Pod::Usage;
use Data::Dumper;
use Config::IniFiles;
use constant STDEBUG => $ENV{STDEBUG} || 0;

sub new {
  my ( $class, $opt_str ) = @_;

  my %options = (
    "user|u=s" => \my $user,
    "password|p=s" => \my $password,
    "host|h=s" => \my $host,
    "socket|S=s" => \my $socket,
    "port|P=i" => \(my $port = 3306),
    "database|D=s" => \my $database,
    "charset|A=s" => \my $charset,
    "mysql-read-default-file|F=s" => \my $mysql_read_default_file,
    "ask-pass" => \my $ask_pass,
    "verbose" => \my $verbose,
    "databases|d=s@" => \my $databases,
    "ignore-databases=s@" => \my $ignore_databases,
    "engines|e=s@" => \my $engines,
    "ignore-engines=s@" => \my $ignore_engines,
    "tables|t=s@" => \my $tables,
    "ignore-tables=s@" => \my $ignore_tables,
    "databases-regex=s" => \my $databases_regex,
    "tables-regex=s" => \my $table_regex,
    "ignore-databases-regex=s" => \my $ignore_databases_regex,
    "ignore-tables-regex=s" => \my $ignore_tables_regex,
    "sql!" => \(my $sql = 1),
    "summary!" => \(my $summary = 1),
    "set-vars=s%" => \my $set_vars,
    "show-usage-for-all-indexes" => \my $show_usage_for_all_indexes,
    "ignore-low-uptime" => \my $ignore_low_uptime,
    "help" => \my $help
  );
  GetOptions(
    %options
  ) or pod2usage(-verbose => 1);
  pod2usage(1) if $help;

  my %args = ();
  foreach my $arg_key ( keys %options ) {
    my @name_str = split(/(=|\+|\!|:)/, $arg_key);
    my @names = split(/\|/, $name_str[0]);
    my $primary_name = $names[0];
    $args{$primary_name} = ${$options{$arg_key}};
  }
  my $self = {
    args => \%args
  };

  if (defined $opt_str) {
    foreach my $opt ( split(qr/(?<!\\),/, $opt_str) ) {
      $opt =~ s/\\,/,/g;
      if ( my ($opt_key, $opt_val) = $opt =~  m/^(.)=(.*)$/ ) {
        STDEBUG && print "key: $opt_key, val: $opt_val\n";
        foreach my $arg_key ( keys %options ) {
          my @name_str = split(/(=|\+|\!|:)/, $arg_key);
          my @names = split(/\|/, $name_str[0]);
          my $primary_name = $names[0];

          foreach my $name (@names[1..$#names]) {
            if ($name eq $opt_key) {
              $self->{args}->{$primary_name} = $opt_val;
              last;
            }
          }
        }
      }
    }
  }

  STDEBUG && print "args: " . Dumper($self->{args});

  return bless $self, $class;
}

sub get_option {
  my ( $self, $key ) = @_;

  return $self->{args}->{$key};
}

sub parse_dsn {
  my ( $self ) = @_;

  my @conf_files = (
    "/etc/my.cnf",
    "/etc/mysql/my.cnf",
    "/usr/etc/my.cnf",
    "$ENV{HOME}/.my.cnf",
  );

  my $fixed_options = {};
  if ( $Config::IniFiles::VERSION >= '3.0' ) { # -php_compat was added in v3.0+
    $fixed_options->{ -php_compat } = 1;
  }

  # get credentials from files
  foreach my $conf_file (@conf_files) {
    if (! -e "$conf_file") {
      next;
    }

    my %options = %$fixed_options;
    $options{ -file } = $conf_file;
    if (tie my %ini, 'Config::IniFiles', %options) {
      if (!defined $ini{client}) {
        next;
      }

      if (defined $ini{client}{user} && !defined $self->{args}->{user}) {
        $self->{args}->{user} = $ini{client}{user};
      }

      if (defined $ini{client}{password} && !defined $self->{args}->{password}) {
        $self->{args}->{password} = $ini{client}{password};
      }

      if (defined $ini{client}{host} && !defined $self->{args}->{host}) {
        $self->{args}->{host} = $ini{client}{host};
      }

      if (defined $ini{client}{port} && !defined $self->{args}->{port}) {
        $self->{args}->{port} = $ini{client}{port};
      }

      if (defined $ini{client}{socket} && !defined $self->{args}->{socket}) {
        $self->{args}->{socket} = $ini{client}{socket};
      }
    }
  }

  # user still not defined, set user to
  # current login user
  if (!defined $self->{args}->{user}) {
    $self->{args}->{user} = $ENV{LOGNAME} || getpwuid($<) || $ENV{USER} . '@localhost';
  }

  if (defined $self->{args}->{host} || defined $self->{args}->{socket}) {
    return;
  }

  # can't get default socket patch, use
  # default host 'localhost'
  if (!defined $self->{args}->{socket}) {
    $self->{args}->{host} = 'localhost';
  }

  STDEBUG && print "args: " . Dumper($self->{args});
}

# ############################################################################
# DB package
# ############################################################################
package DB;

use strict;
use warnings FATAL => 'all';
use English qw(-no_match_vars);
use Data::Dumper;
use constant STDEBUG => $ENV{STDEBUG} || 0;

my @DB_TRUES = (1,"true","True","TRUE","yes","Yes","YES","on","On","ON");

eval {
   require DBI;
};
my $have_dbi = $EVAL_ERROR ? 0 : 1;

sub new {
  my ( $class, %args ) = @_;
  $args{attrs} ||= {};

  my $defaults = {
    AutoCommit         => 1,
    RaiseError         => 1,
    PrintError         => 0,
    ShowErrorStatement => 1,
    mysql_enable_utf8 => (defined $args{dsn} && $args{dsn} =~ m/charset=utf8/i ? 1 : 0),
  };
  @{$defaults}{ keys %{$args{attrs}} } = values %{$args{attrs}};

  if ( !$have_dbi ) {
    die "Cannot connect to MySQL because the Perl DBI module is not "
        . "installed or not found.  Run 'perl -MDBI' to see the directories "
        . "that Perl searches for DBI.  If DBI is not installed, try:\n"
        . "  Debian/Ubuntu  apt-get install libdbi-perl\n"
        . "  RHEL/CentOS    yum install perl-DBI\n"
        . "  OpenSolaris    pgk install pkg:/SUNWpmdbi\n";
  }

  my $dsn = get_dbi_dsn($args{host}, $args{port}, $args{socket}, $args{database}, $args{charset}, $args{mysql_read_default_file});
  if ($dsn =~ m/DBI:MariaDB/) {
    delete $defaults->{mysql_enable_utf8};
  }

  STDEBUG && print "dsn: $dsn\n";

  my $dbh;
  my $tries = 2;
  while ( !$dbh && $tries-- ) {
    eval {
        $dbh = DBI->connect($dsn, $args{user}, $args{password}, $defaults);
    };
    if ( !$dbh && $EVAL_ERROR ) {
        if ( $EVAL_ERROR =~ m/not a compiled character set|character set utf8/ ) {
          STDEBUG && print 'Going to try again without utf8 support';
          delete $defaults->{mysql_enable_utf8};
        }
        elsif ( $EVAL_ERROR =~ m/locate DBD\/(mysql|MariaDB)/i ) {
          die "Cannot connect to MySQL/MariaDB because the Perl DBD::mysql/DBD::MariaDB module is "
              . "not installed or not found.  Run 'perl -MDBD::mysql'/'perl -MDBD::MariaDB' to see "
              . "the directories that Perl searches for DBD::mysql/DBD::MariaDB.  If "
              . "DBD::mysql/DBD::MariaDB is not installed, try:\n"
              . "  Debian/Ubuntu  apt-get install libdbd-mysql-perl/libdbd-mariadb-perl\n"
              . "  RHEL/CentOS    yum install perl-DBD-MySQL/perl-DBD-MariaDB\n"
              . "  OpenSolaris    pgk install pkg:/SUNWapu13dbd-mysql\n";
        }
        if ( !$tries ) {
          die $EVAL_ERROR;
        }
    }
  }

  STDEBUG && print 'DBH info: ',
    $dbh,
    Dumper($dbh->selectrow_hashref(
        'SELECT DATABASE(), CONNECTION_ID(), VERSION()/*!50038 , @@hostname*/')),
    'Character set info:',   Dumper($dbh->selectall_arrayref(
                    'SHOW VARIABLES LIKE "character_set%"', { Slice => {}})),
    '$DBI::VERSION:',        $DBI::VERSION, "\n";

  my $self = {
    dbh => $dbh,
  };

  return bless $self, $class;
}

sub get_dbi_dsn {
  my ( $host, $port, $socket, $database, $charset, $mysql_read_default_file ) = @_;

  if (!$host && !$socket) {
    return undef;
  }

  my $dsn;
  my $socket_opt;
  eval{ require DBD::MariaDB };
  if ($@) {
    $dsn = "DBI:mysql:mysql_auto_reconnect=1";
    $socket_opt = 'socket';
  } else {
    $dsn = "DBI:MariaDB:mariadb_auto_reconnect=1";
    $socket_opt = 'mariadb_socket';
  };

  if (defined $socket && $socket ne '') {
    $dsn = "${dsn};${socket_opt}=${socket}";
  } else {
    $dsn = "${dsn};port=${port};host=${host}";
  }

  if (defined $database && $database ne '') {
    $dsn = "${dsn};database=${database}";
  }

  if (defined $charset && $charset ne '') {
    $dsn = "${dsn};charset=${charset}";
  }

  if (defined $mysql_read_default_file && $mysql_read_default_file ne '') {
    $dsn = "${dsn};mysql_read_default_file=${mysql_read_default_file}";
  }

  return $dsn;
}

sub disconnect {
  my ( $self ) = @_;
  $self->{dbh}->disconnect();
}

sub is_true {
  my ( $self, $value ) = @_;
  return grep $_ eq $value, @DB_TRUES;
}

# ############################################################################
# st_unused_key_checker program.
# ############################################################################
package st_unused_key_checker;

use warnings FATAL => 'all';
use English qw(-no_match_vars);
use Data::Dumper;
use Capture::Tiny ':all';
use Text::Table;
use constant STDEBUG => $ENV{STDEBUG} || 0;

my $max_width = 74;
my $hdr_width = $max_width - 2;  # for '# '
my $hdr_fmt   = "# %-${hdr_width}s\n";

sub main {
  my @ARGV = @_;

  my $o = new Option(shift @ARGV);
  $o->parse_dsn();

  my $database = $o->get_option('database');
  my $password = $o->get_option('password');
  if ($o->get_option('ask-pass')) {
    eval {
      require Term::ReadKey;
      Term::ReadKey::ReadMode('noecho');
      chomp($password = <STDIN>);
      Term::ReadKey::ReadMode('normal');
      print "\n"
         or die "Cannot print: $OS_ERROR";
    };
    if ( $EVAL_ERROR ) {
        die "Cannot read response; is Term::ReadKey installed? $EVAL_ERROR";
    }
  }

  my $db = new DB(
    host => $o->get_option('host'),
    port => $o->get_option('port'),
    socket => $o->get_option('socket'),
    user => $o->get_option('user'),
    password => $password,
    database => $database,
    charset => $o->get_option('charset'),
    mysql_read_default_file => $o->get_option('mysql-read-default-file')
  );

  my $verbose = $o->get_option('verbose');
  my $databases = $o->get_option('databases');
  my $engines = $o->get_option('engines');
  my $tables = $o->get_option('tables');
  my $ignore_databases = $o->get_option('ignore-databases');
  my $ignore_engines = $o->get_option('ignore-engines');
  my $ignore_tables = $o->get_option('ignore-tables');

  my $ignore_low_uptime = $o->get_option('ignore-low-uptime');
  my $show_usage_for_all_indexes = $o->get_option('show-usage-for-all-indexes');
  my $show_sql = $o->get_option('sql');

  my $userstat_row;
  eval { $userstat_row = $db->{dbh}->selectrow_arrayref("SHOW GLOBAL VARIABLES LIKE 'userstat'") };
  if ($EVAL_ERROR) {
    die "Can't get userstatus: ${EVAL_ERROR}";
  }
  if (!defined $userstat_row) {
    die "This tool only works on Percona MySQL and MariaDB, which have the User Statistics (userstat) plugin";
  }
  if (!$userstat_row->[1]) {
    die "'userstat' must be set 1 for this tool to work";
  }

  my $uptime;
  eval { $uptime = $db->{dbh}->selectrow_arrayref("SHOW GLOBAL STATUS LIKE 'Uptime'")->[1] };
  if ($EVAL_ERROR) {
    die "Can't get uptime status: ${EVAL_ERROR}";
  }

  # abort or emit a warning if uptime is less than 24 hours
  if ($uptime < 24 * 60 * 60) {
    if ( $ignore_low_uptime ) {
      warn "WARNNING: database uptime is less than 24 hours, the results will be unreliable";
    } else {
      die "Abort because database uptime is less than 24 hours";
    }
  }

  my $sql = "
SELECT    statistics.table_schema,
          statistics.table_name,
          statistics.index_name,
          index_statistics.rows_read
FROM		  information_schema.statistics
LEFT JOIN	information_schema.index_statistics ON
            statistics.table_schema = index_statistics.table_schema AND
            statistics.table_name = index_statistics.table_name AND
            statistics.index_name = index_statistics.index_name";

  if (defined $database && $database ne '') {
    push(@{$databases}, $database);
  }

  my @or_where_clauses = ();
  if (defined $databases && (scalar @{$databases}) > 0) {
    my $in_str = 'IN (' . join(', ', map { $db->{dbh}->quote("$_") } @{$databases}) . ')';
    push(@or_where_clauses,  "statistics.table_schema $in_str");

    my $schemas;
    eval { $schemas = $db->{dbh}->selectcol_arrayref("
      SELECT schema_name
      FROM information_schema.SCHEMATA
      WHERE schema_name $in_str
    ") };
    if ($EVAL_ERROR) {
      die "Can't get schema list with @{$databases}: ${EVAL_ERROR}";
    }

    foreach my $tmp_database (@{$databases}) {
      my $exists = 0;
      foreach my $tmp_schema (@{$schemas}) {
        if ("$tmp_database" eq "$tmp_schema") {
          $exists = 1;
          last;
        }
      }
      if (!$exists) {
        die "Database '$tmp_database' doesn't exist";
      }
    }
  }

  if (defined $tables && (scalar @{$tables}) > 0) {
    my @mapped_strs = ();
    foreach my $table (@{$tables}) {
      my ($schema_or_tbl, $tbl) = split('\.', "$table", 2);
      if ( defined $tbl && $tbl eq '' ) { die "table name in '$table' is not given" };

      my $table_exists;
      if (defined $tbl && defined $schema_or_tbl && $schema_or_tbl ne '') {
        my $fmt_str = '( %s.table_schema = ' . $db->{dbh}->quote("$schema_or_tbl") . ' AND %s.table_name = ' . $db->{dbh}->quote("$tbl") . ' )';
        push(@mapped_strs, sprintf("$fmt_str", "statistics", "statistics"));
        eval { $table_exists = $db->{dbh}->selectcol_arrayref("
          SELECT 1
          FROM information_schema.TABLES
          WHERE " . sprintf("$fmt_str", "TABLES", "TABLES") . " AND TABLE_TYPE = 'BASE TABLE'
          LIMIT 1
        ")->[0] };
      } else {
        my $fmt_str = 'table_name = ' . $db->{dbh}->quote("$schema_or_tbl");
        push(@mapped_strs, 'statistics.' . "$fmt_str");
        eval { $table_exists = $db->{dbh}->selectcol_arrayref("
          SELECT 1
          FROM information_schema.TABLES
          WHERE $fmt_str AND TABLE_TYPE = 'BASE TABLE'
          LIMIT 1
        ")->[0] };
      }
      if ($EVAL_ERROR) {
        die "Can't check if table exists for '$table': $EVAL_ERROR";
      }
      if (!defined $table_exists || !$table_exists) {
        die "BASE TABLE '$table' doesn't exists";
      }
    }
    push(@or_where_clauses, '( ' . join(' OR ', @mapped_strs) . ' )');
  }

  my @and_where_clauses = ();
  push(@{$ignore_databases}, ('information_schema', 'mysql', 'performance_schema'));
  if ((scalar @{$ignore_databases}) > 0) {
    push(@and_where_clauses, 'statistics.table_schema NOT IN (' . join(', ', map { $db->{dbh}->quote("$_") } @{$ignore_databases}) . ')' );
  }

  if (defined $ignore_tables && (scalar @{$ignore_tables}) > 0) {
    push(@and_where_clauses, '( ' . join(' AND ', map {
      my ($schema_or_tbl, $tbl) = split('\.', "$_", 2);
      if ( defined $tbl && $tbl eq '' ) { die "table name in '$_' is not given" };
      defined $tbl && defined $schema_or_tbl && $schema_or_tbl ne ''
        ? '!( statistics.table_schema = ' . $db->{dbh}->quote("$schema_or_tbl") . ' AND statistics.table_name = ' . $db->{dbh}->quote("$tbl") . ' )'
        : 'statistics.table_name != ' . $db->{dbh}->quote("$schema_or_tbl")
    } @{$ignore_tables}) . ' )');
  }

  $sql = "$sql
WHERE     (" . ((scalar @or_where_clauses) > 0 ? join(' OR ', @or_where_clauses) : "1") . ") AND (" . join(' AND ', @and_where_clauses) . ")
GROUP BY	statistics.table_schema,
          statistics.table_name,
          statistics.index_name";

  if (!$show_usage_for_all_indexes) {
    $sql = "$sql
HAVING  index_statistics.rows_read IS NULL";
  } else {
    $sql = "$sql
ORDER BY	index_statistics.rows_read,
		      statistics.table_name";
  }

  STDEBUG && print "structured sql -> $sql\n";

  my $index_rows;
  eval { $index_rows = $db->{dbh}->selectall_arrayref("$sql", { Slice => {} }) };
  if ($EVAL_ERROR) {
    die "Can't get index rows: ${EVAL_ERROR}";
  }

  my $total_index = 0;
  my $total_unused_index = 0;
  if ($show_usage_for_all_indexes) {
    my $engine_cache = {};
    my $tb = Text::Table->new(('table_schema', 'table_name', 'index_name', 'rows_read'));
    foreach my $index_row (@{$index_rows}) {
      my $schema = $index_row->{table_schema};
      my $table = $index_row->{table_name};
      my $rows_read = defined $index_row->{rows_read} ? $index_row->{rows_read} : 0;

      if (!is_schema_table_engine_allowed($o, $schema, $table, undef)) {
        next;
      }

      if (defined $engines || defined $ignore_engines) {
        my $engine;
        if (!defined ($engine = $engine_cache->{$db->{dbh}->quote_identifier(undef, $schema, $table)})) {
          $engine = get_engine($db, $schema, $table);
        }

        if (!is_schema_table_engine_allowed($o, undef, undef, $engine)) {
          next;
        }
      }

      $total_index++;
      if ($rows_read < 1) { $total_unused_index++ }; 
      $tb->load([("$schema", "$table", "$index_row->{index_name}", "$rows_read")]);
    }
    print $tb . "\n";
  } else {
    my $schema_table_indexes = {};
    foreach my $index_row (@{$index_rows}) {
      if (!defined $schema_table_indexes->{$index_row->{table_schema}}) {
        $schema_table_indexes->{$index_row->{table_schema}} = {};
      }
      if (!defined $schema_table_indexes->{$index_row->{table_schema}}->{$index_row->{table_name}}) {
        $schema_table_indexes->{$index_row->{table_schema}}->{$index_row->{table_name}} = ();
      }
      push(@{$schema_table_indexes->{$index_row->{table_schema}}->{$index_row->{table_name}}}, {
        index_name => $index_row->{index_name},
        rows_read => $index_row->{rows_read}
      });
    }

    STDEBUG && print "structured indexes data -> \n" . Dumper($schema_table_indexes);

    foreach my $schema (keys %{$schema_table_indexes}) {
      foreach my $table (keys %{$schema_table_indexes->{$schema}}) {
        if (!is_schema_table_engine_allowed($o, $schema, $table, undef)) {
          next;
        }

        my $engine = get_engine($db, $schema, $table);
        if (!is_schema_table_engine_allowed($o, undef, undef, $engine)) {
          next;
        }

        printf $hdr_fmt, ('#' x $hdr_width);
        printf $hdr_fmt, "$schema.$table";
        printf $hdr_fmt, ('#' x $hdr_width);
        print "\n";

        my $has_used_index;
        foreach my $index_row (@{$schema_table_indexes->{$schema}->{$table}}) {
          my $index_name = $index_row->{index_name};
          my $rows_read = defined $index_row->{rows_read} ? $index_row->{rows_read} : 0;

          printf $hdr_fmt, "$index_name is unused.";
          if (!$show_sql) {
            next;
          }

          if ("$engine" eq 'InnoDB' && "$index_name" eq 'PRIMARY') {
            if (!defined $has_used_index) {
              eval { $has_used_index = $db->{dbh}->selectcol_arrayref("
                SELECT      COUNT(1)
                FROM        information_schema.statistics
                LEFT JOIN   information_schema.index_statistics ON
                              statistics.table_schema = index_statistics.table_schema AND
                              statistics.table_name = index_statistics.table_name AND
                              statistics.index_name = index_statistics.index_name
                WHERE statistics.table_schema = " . $db->{dbh}->quote("$schema") . " AND statistics.table_name = " . $db->{dbh}->quote("$table") . " AND index_statistics.rows_read > 0")->[0]
              };
              if ($EVAL_ERROR) {
                die "Can't get used index from schema = $schema, table = $table: $EVAL_ERROR";
              }
            }
            if ($has_used_index) {
              printf $hdr_fmt, "PRIMARY key of $schema.$table is unused, but another key is used.\n";
            } else {
              print "DROP TABLE " . $db->{dbh}->quote_identifier(undef, $schema, $table) . ";\n\n";
            }
          } else {
            print "ALTER TABLE " . $db->{dbh}->quote_identifier(undef, $schema, $table) . " DROP INDEX " . $db->{dbh}->quote_identifier(undef, $index_name) . ";\n\n";
          }
        }

        $total_unused_index = $total_unused_index + (scalar @{$schema_table_indexes->{$schema}->{$table}});
      }
    }
  }

  if ($o->get_option('summary')) {
    print "\n# Total Unused Indexes  $total_unused_index\n";
    if ($show_usage_for_all_indexes) {
      print "# Total Indexes         $total_index\n";
    }
  }

  $db->disconnect() if $db;
  return 0;
}

sub get_engine {
  my ($db, $schema, $table) = @_;
  my $engine_row;
  eval { $engine_row = $db->{dbh}->selectrow_hashref("SHOW CREATE TABLE " . $db->{dbh}->quote_identifier(undef, $schema, $table)) };
  if ($EVAL_ERROR) {
    die "Can't get SHOW CREATE TABLE for schema='$schema', table='$table': ${EVAL_ERROR}";
  }

  my ( $engine_key ) = grep { m/create (?:table|view)/i } keys %$engine_row;
  if (!$engine_key) {
    die "No 'Create Table' or 'Create View' from SHOW CREATE TABLE of schema='$schema', table='$table'";
  }
  my ( $engine ) = $engine_row->{$engine_key} =~ m/\).*?(?:ENGINE|TYPE)=(\w+)/;
  return $engine;
}

sub is_schema_table_engine_allowed {
  my ($o, $schema, $table, $engine) = @_;

  my $databases_regex = $o->get_option('databases-regex');
  my $ignore_databases_regex = $o->get_option('ignore-databases-regex');
  my $tables_regex = $o->get_option('tables-regex');
  my $ignore_tables_regex = $o->get_option('ignore-tables-regex');
  my $engines = $o->get_option('engines');
  my $ignore_engines = $o->get_option('ignore-engines');

  if (defined $schema && defined $databases_regex && $schema !~ $databases_regex) {
    return 0;
  }

  if (defined $schema && defined $ignore_databases_regex && $schema =~ $ignore_databases_regex) {
    return 0;
  }

  if (defined $table && defined $tables_regex && $table !~ $tables_regex) {
    return 0;
  }

  if (defined $table && defined $ignore_tables_regex && $table =~ $ignore_tables_regex) {
    return 0;
  }

  if (defined $engine && defined $engines && !(grep { m/${engine}/i } @{$engines})) {
    return 0;
  }

  if (defined $engine && defined $ignore_engines && (grep { m/${engine}/i } @{$ignore_engines})) {
    return 0;
  }

  return 1;
}

# ############################################################################
# Run the program.
# ############################################################################
if ( !caller ) { exit main(@ARGV); }

1; # Because this is a module as well as a script.

# ############################################################################
# Documentation.
# ############################################################################

__END__

=head1 NAME

st-unused-key-checker - a program to check unused indexes in a MySQL table.

=head1 SYNOPSIS

Usage: st-unused-key-checker [OPTION...] [DSN]

st-unused-key-checker unused indexes in a MySQL table.

Example:

  st-unused-key-checker

  st-unused-key-checker -u mysql -h localhost

  st-unused-key-checker u=mysql,p=mysql

Default credentials are read from the following files in the given order:
/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf

=head1 DESCRIPTION

st-unused-key-checker takes the advantage of MariaDB and Percona MySQL's
'userstat' statistics, gets unused indexes from information_schema.index_statistics.

=head1 OPTIONS

=over 8

=item B<--schema>

type: string

The schema to be checked

=item B<--user>

short form: -u; type: string

User for login if not current user.

=item B<--password>

short form: -p; type: string

Password to use when connecting.

=item B<--host>

short form: -h; type: string

Server to connect to.

=item B<--socket>

short form: -S; type: string

The socket file to use for connection.

=item B<--port>

short form: -P; type: integer

Server listen port.

=item B<--ask-pass>

type: boolean

Prompt for a password when connecting to MySQL.

=item B<--set-vars>

type: hash

Set the MySQL variables in this C<variable=value> pairs.

The tool prints a warning and continues if a variable cannot be set.

=item B<--[no]sql>

default: yes

Print DROP KEY statement for each duplicate key.  By default an ALTER TABLE
DROP KEY statement is printed below each duplicate key so that, if you want to
remove the duplicate key, you can copy-paste the statement into MySQL.

To disable printing these statements, specify C<--no-sql>.

=item B<--[no]summary>

default: yes

Print summary of indexes at end of output.

=item B<--tables>

short form: -t; type: list

Check only this list of tables.

Table names may be qualified with the database name.

=item B<--databases>

short form: -d; type: list

Check only this list of databases.

=item B<--engines>

short form: -e; type: list

Check only tables whose storage engine is in this list.

=item B<--ignore-databases>

type: list

Ignore this list of databases.

=item B<--ignore-engines>

type: list

Ignore this list of storage engines.

=item B<--ignore-tables>

type: list

Ignore this list of tables.

Table names may be qualified with the database name.

=item B<--databases-regex>

type: string

Only get tables and indexes from database whose names match this Perl regex.

=item B<--tables-regex>

type: string

Only get indexes from tables whose names match this Perl regex.

=item B<--ignore-databases-regex>

type: string

Ignore databases whose names match this Perl regex.

=item B<--ignore-tables-regex>

type: string

Ignore tables whose names match the Perl regex.

=item B<--show-usage-for-all-indexes>

type: boolean

Whether to show usage for all indexes.

=item B<--ignore-low-uptime>

type: boolean

Whether to continue when system uptime is less than 24 hours.

=item B<--verbose>

type: boolean; default: false

Whether to show all columns from a table.

=item B<--help>

Print a brief help message and exits.

=item B<--version>

Show version and exit.

=back

=head1 DSN OPTIONS

These DSN options are used to create a DSN.  Each option is given like
C<option=value>.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the C<=> and
if the value contains whitespace it must be quoted.  DSN options are
comma-separated.

=over

=item * A

Default character set.

=item * D

Default database.

=item * F

Only read default options from the given file

=item * h

Connect to host.

=item * p

Password to use when connecting.
If password contains commas they must be escaped with a backslash: "exam\,ple"

=item * P

Port number to use for connection.

=item * S

Socket file to use for connection.

=item * u

User for login if not current user.

=cut
